[project]
name = "experiments-starter"
version = "0.1.0"
description = "UV-based OpenAI/Azure OpenAI experimentation harness (datasets + prompts + schemas + runs)"
readme = "README.md"
requires-python = ">=3.13"
license = { file = "LICENSE" }
authors = [
  { name = "Ioannis Kozaris" }
]

# Core runtime deps (lean but modern)
dependencies = [
  "openai>=1.0",          # Unified OpenAI & Azure OpenAI Python SDK (Responses API, structured outputs)
  "pydantic>=2.7",        # Data validation / settings / JSON Schema generation for structured outputs
  "jinja2>=3.1",          # Prompt templating (parameterized user/system prompts)
  "orjson>=3.9",          # Ultra fast JSON (used for JSONL read/write of datasets & results)
  "python-dotenv>=1.0",   # Load local .env with API keys for OpenAI / Azure
  "typer>=0.12",          # CLI framework (builds the `expt` command)
  # NOTE: previously referenced `expt`; current console scripts are `xai`, `xexp`, etc.
  "rich>=13.7",           # Pretty logging / console output (color, tracebacks)
  "tqdm>=4.66",           # Progress bars for batch runs
  "httpx>=0.27",          # Async/advanced HTTP client (future custom calls, retries, proxies)
  "pyyaml>=6.0",          # YAML config loading
]

[project.optional-dependencies]
notebooks = [
  "jupyterlab>=4.2",      # Modern notebook / IDE environment
  "ipykernel>=6.29",      # Kernel to run Python code in notebooks (links env to Jupyter)
  "ipywidgets>=8.1",      # Interactive widgets for richer exploratory tooling
  "pandas>=2.2",          # DataFrame exploration & analysis in notebooks
  "plotly>=5.22",         # Interactive charts (used in walkthrough notebook)
]
azure = [
  "azure-identity>=1.16",     # Credential helpers (Managed Identity, CLI, Visual Studio, etc.)
  "azure-ai-projects>=1.0.0b12", # Higher-level helpers (preview) for Azure AI project & OpenAI client acquisition
]
dev = [
  "ruff>=0.6",                 # Linter + formatter
  "mypy>=1.10",                # Static type checking
  "types-requests>=2.32.0.20240712", # Type stubs for requests
]

[project.scripts]
# Consolidated CLI naming: primary command `exp` with subcommands, plus optional direct helpers.
exp = "app.cli:app"                 # Main CLI root
clean = "app.tools.clean:main"  # Clean caches & __pycache__

# Developer convenience commands (non-console-script shell commands) moved to [tool.uv.scripts]


[tool.uv]
package = true  # true so entry points are installed into the venv (metadata lives in .venv, not repo)

[tool.ruff]
line-length = 100
target-version = "py313"

[tool.ruff.lint]
select = ["E","F","I","UP","B","SIM","S","RUF"]
ignore = ["S101"]

[tool.ruff.format]
quote-style = "double"
[tool.mypy]
python_version = "3.13"
strict = true
warn_unused_ignores = true
warn_redundant_casts = true
ignore_missing_imports = true

# Modern build backend so uv can build a wheel; wheel metadata stays in the venv (.venv/Lib/site-packages)
[build-system]
requires = ["hatchling>=1.24"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "ruff>=0.12.10",
]

# Explicit hatch build config so hatchling knows which package directory to ship.
# Project name uses a hyphen (experiments-starter) while the package directory is `experiments`.
# Without this, hatch can't auto-detect and the editable build fails.
[tool.hatch.build.targets.wheel]
# Use explicit src layout package paths so both top-level packages are installed (no duplicates).
packages = ["src/app", "src/experiments"]

[tool.hatch.build.targets.sdist]
include = ["src/app", "src/experiments", "README.md", "pyproject.toml"]
